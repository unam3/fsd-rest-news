drop table if exists authors cascade;
drop table if exists users cascade;
drop table if exists categories cascade;
drop table if exists tags cascade;
drop table if exists articles cascade;
drop table if exists articles_tags cascade;
drop table if exists articles_comments cascade;

begin;

create table users (
    user_id         integer generated always as identity,
    username        text not null unique,
    password        text not null,
    name            varchar(80) not null,
    surname         varchar(80) not null,
    avatar          text,
    creation_date   timestamp DEFAULT current_timestamp,
    is_admin        boolean not null,

    primary key (user_id)
);


create table authors (
    author_id       integer generated always as identity primary key,
    -- user_id         integer references users on delete cascade unique,
    user_id         integer references users unique,
    description     text not null
);

create table categories (
    category_id     integer generated always as identity primary key,
    name            varchar(80) not null,
    parent_id       integer references categories
);

create table tags (
    tag_id          integer generated always as identity primary key,
    tag_name        varchar(80) not null unique
);

create table articles (
    article_id          integer generated always as identity,
    article_title       varchar(80) not null,
    creation_date       timestamp DEFAULT current_timestamp,
    author              integer references authors (author_id),
    category_id         integer references categories,
    article_content     text not null,
    is_published        boolean not null,
    main_photo          text,
    additional_photos   text[] not null default array[]::text[],
    primary key (article_id)
);

create table articles_tags (
    tag_id          integer references tags (tag_id),
    article_id      integer references articles (article_id) on delete cascade,
    primary key (tag_id, article_id)
);

create table articles_comments (
    comment_id      integer generated always as identity,
    user_id         integer references users (user_id),
    article_id      integer references articles (article_id) not null,
    comment_text    text not null
);

commit;

CREATE OR REPLACE FUNCTION public.get_category_descendants(cat_id integer)
       RETURNS int[]
       LANGUAGE sql
    AS $function$
        with recursive categories_recursive(category_id, parent_id) AS (
            select category_id, parent_id
            from categories
            where parent_id = cat_id
            union all
            select categories.category_id, categories.parent_id
            from categories_recursive, categories
            where categories_recursive.category_id = categories.parent_id
        ) select coalesce(array_agg(categories_recursive.category_id), array[] :: integer[])
        from categories_recursive
        where categories_recursive.category_id != cat_id;
    $function$;

CREATE OR REPLACE FUNCTION public.get_article(art_id integer)
       RETURNS json
       LANGUAGE sql
    AS $function$
        with author as (
            select *
            from authors
            where author_id = (
                select author
                from articles
                where article_id = art_id
            )
        ), atags as (
            select json_agg(tags) from (
                    select tags.*
                    from tags
                    inner join articles_tags
                    on tags.tag_id = articles_tags.tag_id
                    where article_id = art_id
                ) as tags
        ),
        categories_hierarchy as (
            WITH RECURSIVE categories_recursive(category_id, name, parent_id) AS (
                SELECT category_id, name, parent_id
                FROM categories
                WHERE category_id = (select category_id from articles as a where a.article_id = art_id)
                UNION ALL
                SELECT categories.category_id, categories.name, categories.parent_id
                FROM categories_recursive, categories
                WHERE categories_recursive.parent_id = categories.category_id
            )
            SELECT json_agg(row_to_json(categories_recursive.*)) FROM categories_recursive
        )
        select row_to_json(as_row) from (
            --is_published        boolean not null,
            select
                a.article_id,
                a.article_title,
                a.article_content,
                a.creation_date,
                categories_hierarchy.json_agg as categories,
                uuser as user,
                atags.json_agg as tags,
                a.main_photo,
                a.additional_photos
            from
                author,
                categories_hierarchy,
                atags,
                articles a,
                (   select
                        author.user_id,
                        name,
                        surname,
                        avatar,
                        creation_date
                    from users,
                        author
                    where users.user_id = author.user_id
                ) as uuser
            where a.article_id = art_id
        ) as as_row;
    $function$;

CREATE OR REPLACE FUNCTION public.edit_article_draft(
    author integer,
    article_id integer,
    category_id integer,
    article_title varchar,
    article_content text,
    main_photo text,
    additional_photos text[],
    tags int[]
)
       RETURNS json
       LANGUAGE sql
    AS $function$
        with inserted_tags as (
            insert into articles_tags
            (tag_id, article_id)
            (select unnest(edit_article_draft.tags), edit_article_draft.article_id)
            on conflict (tag_id, article_id) do nothing
        ), deleted_tags_if_empty_array as (
            delete from articles_tags
            using (
                select tag_id
                from articles_tags
                where articles_tags.article_id = edit_article_draft.article_id
                    and coalesce(array_length(edit_article_draft.tags, 1), 0) = 0
            ) as tags_to_delete
            where article_id = edit_article_draft.article_id
                and articles_tags.tag_id = tags_to_delete.tag_id
        ), deleted_tags_that_not_in_array as (
            delete from articles_tags
            using (
                select tag_id
                from articles_tags,
                    unnest(edit_article_draft.tags) as tags_to_assign
                where articles_tags.article_id = edit_article_draft.article_id
                    and tag_id != tags_to_assign
                group by tag_id
            ) as tags_to_delete
            where article_id = edit_article_draft.article_id
                and articles_tags.tag_id = tags_to_delete.tag_id
        )
        update articles
        set category_id = edit_article_draft.category_id,
            article_title = edit_article_draft.article_title,
            article_content = edit_article_draft.article_content,
            main_photo = edit_article_draft.main_photo,
            additional_photos = edit_article_draft.additional_photos
        where
            author = edit_article_draft.author
            and article_id = edit_article_draft.article_id
        returning json_build_object(
            'article_id', article_id,
            'author', author,
            'category_id', category_id,
            'article_title', article_title,
            'article_content', article_content,
            'is_published', is_published,
            'main_photo', main_photo,
            'additional_photos', additional_photos
            )
    $function$;

SET plpgsql.extra_warnings TO 'all';
SET plpgsql.extra_errors TO 'all';

CREATE OR REPLACE FUNCTION public.create_article_draft(
    author integer,
    category_id integer,
    article_title varchar,
    article_content text,
    tags int[],
    main_photo text,
    additional_photos text[]
)
       RETURNS json
       LANGUAGE plpgsql
    AS $function$
        declare
            created_draft articles%rowtype;
            assigned_tags json;
        begin
            insert into articles
            (author, category_id, article_content, article_title, is_published, main_photo, additional_photos) values
            (author, category_id, article_content, article_title, false, main_photo, additional_photos)
            returning * into created_draft;

            insert into articles_tags
            (tag_id, article_id)
            (select unnest(tags), created_draft.article_id);
            
            return json_build_object( 
                'article_id', created_draft.article_id,
                'author', created_draft.author,
                'category_id', created_draft.category_id,
                'article_title', created_draft.article_title,
                'article_content', created_draft.article_content,
                'is_published', created_draft.is_published,
                'tags', (
                    select json_agg(tags.*)
                    from tags
                    inner join articles_tags
                    on tags.tag_id = articles_tags.tag_id
                    where article_id = created_draft.article_id
                ),
                'main_photo',  created_draft.main_photo,
                'additional_photos',  created_draft.additional_photos
            );
        end;
    $function$;
