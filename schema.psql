drop table if exists authors cascade;
drop table if exists users cascade;
drop table if exists categories cascade;
drop table if exists tags cascade;
drop table if exists articles cascade;
drop table if exists articles_tags cascade;
drop table if exists articles_comments cascade;

begin;

create table users (
    user_id         integer generated always as identity,
    name            varchar(80) not null,
    surname         varchar(80) not null,
    avatar          text,
    creation_date   timestamp DEFAULT current_timestamp,
    is_admin        boolean not null,

    primary key (user_id)
);

INSERT INTO users (name, surname, avatar, is_admin) VALUES
    ('n', 's', 'http://pluh/meh.jpg', false),
    ('n1', 's1', 'http://pluh/meh.jpg', false);

create table authors (
    author_id       integer generated always as identity primary key,
    user_id         integer references users,
    description     text not null
);

INSERT INTO authors (user_id, description) VALUES (2, 'short description');

-- how to create possible parental relations between rows?
create table categories (
    category_id     integer generated always as identity primary key,
    name            varchar(80) not null,
    parent_id       integer references categories
);

INSERT INTO categories (name, parent_id) VALUES
    ('cat1', null),
    ('cat2', 1),
    ('cat3', 1),
    ('cat4', 2),
    ('cat5', 3),
    ('cat6', 5),
    ('cat7', 4);

create table tags (
    tag_id          integer generated always as identity primary key,
    tag_name        varchar(80) not null
);

INSERT INTO tags (tag_name) VALUES
    ('tag'),
    ('tag1'),
    ('tag2');

create table articles (
    article_id          integer generated always as identity,
    article_title       varchar(80) not null,
    creation_date       timestamp DEFAULT current_timestamp,
    author              integer references authors (author_id),
    category_id         integer references categories,
    article_content     text not null,
    is_published        boolean not null,
    primary key (article_id)

    --main_photo          photos not null, -- !
    --additional_photos   photos not null -- !
);

--create table articles_drafts (
--    article_id         integer references articles (article_id)
--);

--create table articles_published (
--    article_id         integer references articles (article_id)
--);

INSERT INTO articles (author, category_id, article_title, article_content, is_published) VALUES
    (1, 1, 'Pretentious silly title', 'As you all know.', true),
    --(1, 2, E'You\'ve never imagine what was…', 'And today topic is children education.', false),
    (1, 2, 'You''ve never imagine what was…', 'And today topic is children education.', false),
    (1, 1, 'Can you believe this?', 'Rectangle has four angles alright!', false),
    (1, 2, 'My dad not a phone', 'My dad not a cellphone. Duh.', false),
    (1, 1, 'Definitely not a clickbait', 'Oh my goooood!11', false);


create table articles_tags (
    tag_id          integer references tags (tag_id),
    article_id      integer references articles (article_id),
    primary key (tag_id, article_id)
);

INSERT INTO articles_tags (tag_id, article_id) VALUES
    (1, 1),
    (2, 1),
    (2, 2);

create table articles_comments (
    comment_id      integer generated always as identity,
    article_id      integer references articles (article_id) not null,
    comment_text    text not null
);

INSERT INTO articles_comments (article_id, comment_text) VALUES
    (1, 'kek'),
    (1, 'pluh'),
    (2, 'meh');

commit;

select * from users;
select * from categories;
select * from articles;
select * from articles_tags;
select * from articles_comments;

CREATE OR REPLACE FUNCTION public.get_article(art_id integer)
       RETURNS json
       LANGUAGE sql
    AS $function$
        select row_to_json(as_row) from (
            --is_published        boolean not null,
            select
                a.article_id,
                a.article_title,
                a.article_content,
                a.creation_date,
                categories_hierarchy.json_agg as categories,
                aauthor as author,
                atags.json_agg as tags
            from
                articles a,
                (select * from authors where author_id = (
                        select author from articles where article_id = art_id
                    )
                ) as aauthor,
                (select json_agg(tags) from (
                        --select * from articles_tags where article_id = art_id
                        select tags.* from tags, (
                            select tag_id from articles_tags where article_id = art_id
                        ) as tag_ids
                        where tags.tag_id = tag_ids.tag_id
                    ) as tags
                ) as atags,
                (
                    WITH RECURSIVE categories_recursive(category_id, name, parent_id) AS (
                        SELECT category_id, name, parent_id
                        FROM categories
                        WHERE category_id = (select category_id from articles as a where a.article_id = art_id)
                        UNION ALL
                        SELECT categories.category_id, categories.name, categories.parent_id
                        FROM categories_recursive, categories
                        WHERE categories_recursive.parent_id = categories.category_id
                    )
                    SELECT json_agg(row_to_json(categories_recursive.*)) FROM categories_recursive
                ) as categories_hierarchy where a.article_id = art_id
        ) as as_row;
    $function$;
