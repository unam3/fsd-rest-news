drop table if exists authors cascade;
drop table if exists users cascade;
drop table if exists categories cascade;
drop table if exists tags cascade;
drop table if exists articles cascade;
drop table if exists articles_tags cascade;
drop table if exists articles_comments cascade;

begin;

create table users (
    user_id         integer generated always as identity,
    name            varchar(80) not null,
    surname         varchar(80) not null,
    avatar          text,
    creation_date   timestamp DEFAULT current_timestamp,
    is_admin        boolean not null,

    primary key (user_id)
);

INSERT INTO users (name, surname, avatar, is_admin) VALUES
    ('n', 's', 'http://pluh/meh.jpg', false),
    ('n1', 's1', 'http://pluh/meh.jpg', false);

create table authors (
    author_id       integer generated always as identity primary key,
    user_id         integer references users,
    description     text not null
);

INSERT INTO authors (user_id, description) VALUES (2, 'short description');

-- how to create possible parental relations between rows?
create table categories (
    category_id     integer generated always as identity primary key,
    name            varchar(80) not null,
    parent_id       integer references categories
);

INSERT INTO categories (name, parent_id) VALUES
    ('cat1', null),
    ('cat2', 1),
    ('cat3', 1),
    ('cat4', 2),
    ('cat5', 3),
    ('cat6', 5),
    ('cat7', 4);

--WITH RECURSIVE categories_recursive(category_id, name, parent_id) AS (
--      SELECT category_id, name, parent_id
--      FROM categories
--      WHERE category_id = 5
--UNION ALL
--      SELECT categories.category_id, categories.name, categories.parent_id
--      FROM categories_recursive, categories
--      WHERE categories_recursive.parent_id = categories.category_id
--    )
--SELECT category_id, name, parent_id FROM categories_recursive;

create table tags (
    tag_id          integer generated always as identity primary key,
    tag_name        varchar(80) not null
);

INSERT INTO tags (tag_name) VALUES
    ('tag'),
    ('tag1'),
    ('tag2');

create table articles (
    article_id          integer generated always as identity,
    article_title       varchar(80) not null,
    creation_date       timestamp DEFAULT current_timestamp,
    author              integer references authors (author_id),
    category_id         integer references categories,
    tags                integer references tags,
    article_content     text not null,
    is_published        boolean not null,
    primary key (article_id)

    --main_photo          photos not null, -- !
    --additional_photos   photos not null -- !
);

--create table articles_drafts (
--    article_id         integer references articles (article_id)
--);

--create table articles_published (
--    article_id         integer references articles (article_id)
--);

INSERT INTO articles (author, category_id, tags, article_title, article_content, is_published) VALUES
    (1, 1, null, '1n', '1xt', true),
    (1, 2, null, '2n', 't2t', false);

create table articles_tags (
    tag_id          integer references tags (tag_id),
    article_id      integer references articles (article_id),
    primary key (tag_id, article_id)
);

INSERT INTO articles_tags (tag_id, article_id) VALUES
    (1, 1),
    (2, 1),
    (2, 2);

create table articles_comments (
    comment_id      integer generated always as identity,
    article_id      integer references articles (article_id) not null,
    comment_text    text not null
);

INSERT INTO articles_comments (article_id, comment_text) VALUES
    (1, 'kek'),
    (1, 'pluh'),
    (2, 'meh');

commit;

select * from users;
select * from categories;
select * from articles;
select * from articles_tags;
select * from articles_comments;
